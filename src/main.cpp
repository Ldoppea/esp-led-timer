// This is how many color levels the display shows - the more the slower the update
//#define PxMATRIX_COLOR_DEPTH 8

// Defines the buffer height / the maximum height of the matrix
//#define PxMATRIX_MAX_HEIGHT 64

// Defines the buffer width / the maximum width of the matrix
//#define PxMATRIX_MAX_WIDTH 64

// Defines how long we display things by default
//#define PxMATRIX_DEFAULT_SHOWTIME 30

// Defines the speed of the SPI bus (reducing this may help if you experience noisy images)
//#define PxMATRIX_SPI_FREQUENCY 20000000

// Creates a second buffer for backround drawing (doubles the required RAM)
//#define PxMATRIX_double_buffer true

#include <Arduino.h>
#include <PxMatrix.h>
#include <OneButton.h>

// Pins for LED MATRIX
#ifdef ESP32

#define P_LAT 22
#define P_A 19
#define P_B 23
#define P_C 18
#define P_D 5
#define P_E 15
#define P_OE 2
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

#endif

#ifdef ESP8266

#include <Ticker.h>
Ticker display_ticker;
#define P_LAT 16
#define P_A 5
#define P_B 4
#define P_C 15
#define P_D 12
#define P_E 0
#define P_OE 2

#define P_BUTTON  D9

#endif

#define matrix_width 64
#define matrix_height 32

// 'snowcamp_64x32', 64x16px
const unsigned long bmp_snowcampsnowcamp_64x32 [] PROGMEM = {
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00080808, 0x008f9191, 0x00565250, 0x0059514a, 0x00151515, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00525353, 0x00ffffff, 0x009d969c, 0x00370300, 0x003d3937, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00a59961, 0x00f7e06f, 0x00c5b684, 0x00441c08, 0x00433e3a, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00494949, 0x004d4d4d, 0x00000000, 0x00000000, 0x00383838, 0x00161616, 0x00000000, 0x002e2e2e, 0x00313131, 0x00000000, 0x00000000, 0x00343434, 0x00575757, 0x00222222, 0x00000000, 0x00111111, 0x00333333, 0x00000000, 0x001a1a1a, 0x001d1d1d, 0x00000000, 0x00323232, 0x00161616, 0x00000000, 0x001e1e1e, 0x00575757, 0x00383838, 0x00000000, 0x00000000, 0x00000000, 0x00222222, 0x00333333, 0x00070707, 0x00000000, 0x00050505, 0x00323232, 0x00232323, 0x00000000, 0x00040404, 0x00333333, 0x001d1d1d, 0x00000000, 0x002d2d2d, 0x00363636, 0x003e3e3e, 0x00181818, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x001a1916, 0x00e5b600, 0x00edc200, 0x00e5cb5a, 0x00663d0d, 0x004e494d, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00020202, 0x00b7b7b7, 0x00f1f1f1, 0x00f1f1f1, 0x00b0b0b0, 0x00000000, 0x00e0e0e0, 0x00e5e5e5, 0x00000000, 0x00d9d9d9, 0x00ececec, 0x00000000, 0x00868686, 0x00f2f2f2, 0x00f3f3f3, 0x00f2f2f2, 0x003d3d3d, 0x00202020, 0x00f1f1f1, 0x00404040, 0x00afafaf, 0x00b9b9b9, 0x002e2e2e, 0x00f1f1f1, 0x00313131, 0x002d2d2d, 0x00efefef, 0x00f2f2f2, 0x00f2f2f2, 0x008f8f8f, 0x00000000, 0x00000000, 0x00dfdfdf, 0x00f1f1f1, 0x007b7b7b, 0x00000000, 0x003d3d3d, 0x00f2f2f2, 0x00eaeaea, 0x00000000, 0x00626262, 0x00f1f1f1, 0x009f9f9f, 0x00000000, 0x00ececec, 0x00f3f3f3, 0x00f3f3f3, 0x00f2f2f2, 0x006b6b6b, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x009c8c51, 0x00f0bd00, 0x00f0c720, 0x00f8d01d, 0x007c5714, 0x00746148, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x004e4e4e, 0x00f1f1f1, 0x007d7d7d, 0x008a8a8a, 0x00f2f2f2, 0x000b0b0b, 0x00b2b2b2, 0x00f3f3f3, 0x00151515, 0x00bbbbbb, 0x00dddddd, 0x00010101, 0x00f2f2f2, 0x00d7d7d7, 0x00363636, 0x00f2f2f2, 0x00cbcbcb, 0x00080808, 0x00f2f2f2, 0x00757575, 0x00c1c1c1, 0x00cdcdcd, 0x00696969, 0x00f3f3f3, 0x000f0f0f, 0x00b9b9b9, 0x00f2f2f2, 0x00373737, 0x00e3e3e3, 0x00f1f1f1, 0x00000000, 0x00010101, 0x00f3f3f3, 0x00f1f1f1, 0x00a9a9a9, 0x00000000, 0x003e3e3e, 0x00f2f2f2, 0x00f3f3f3, 0x00000000, 0x00898989, 0x00f0f0f0, 0x00a2a2a2, 0x00000000, 0x00f2f2f2, 0x00e2e2e2, 0x00404040, 0x00e9e9e9, 0x00f3f3f3, 
	0x00000000, 0x00000000, 0x00000000, 0x000f0f0e, 0x00f0c60f, 0x00c1a00f, 0x00dbb71e, 0x00ffdc15, 0x00a48231, 0x00684000, 0x00a89948, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00484848, 0x00f1f1f1, 0x00a9a9a9, 0x00000000, 0x003d3d3d, 0x00040404, 0x00b7b7b7, 0x00f2f2f2, 0x008c8c8c, 0x00b2b2b2, 0x00cdcdcd, 0x000e0e0e, 0x00f3f3f3, 0x00b3b3b3, 0x00000000, 0x00f5f5f5, 0x00e5e5e5, 0x00040404, 0x00f2f2f2, 0x00a5a5a5, 0x00cfcfcf, 0x00d8d8d8, 0x009d9d9d, 0x00f4f4f4, 0x00060606, 0x00dadada, 0x00f4f4f4, 0x00000000, 0x009e9e9e, 0x00dddddd, 0x00000000, 0x003b3b3b, 0x00f3f3f3, 0x00f3f3f3, 0x00d3d3d3, 0x00000000, 0x00383838, 0x00f3f3f3, 0x00f2f2f2, 0x003a3a3a, 0x00a8a8a8, 0x00f2f2f2, 0x009d9d9d, 0x00000000, 0x00f3f3f3, 0x00d0d0d0, 0x00000000, 0x00c3c3c3, 0x00f2f2f2, 
	0x00000000, 0x00000000, 0x00000000, 0x00968751, 0x00f3c300, 0x00605138, 0x00805e1d, 0x00fed802, 0x00ceaa34, 0x009d7f4d, 0x00c49e00, 0x00837a51, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00b6b6b6, 0x00f0f0f0, 0x00a9a9a9, 0x00000000, 0x00000000, 0x00c4c4c4, 0x00f3f3f3, 0x00ececec, 0x00eaeaea, 0x00b7b7b7, 0x000f0f0f, 0x00f4f4f4, 0x00bbbbbb, 0x00000000, 0x00f5f5f5, 0x00e4e4e4, 0x00000000, 0x00d4d4d4, 0x00e2e2e2, 0x00d6d6d6, 0x00dadada, 0x00dfdfdf, 0x00dbdbdb, 0x00000000, 0x00dadada, 0x00f3f3f3, 0x000f0f0f, 0x00000000, 0x00000000, 0x00000000, 0x008b8b8b, 0x00f4f4f4, 0x00bbbbbb, 0x00f3f3f3, 0x00000000, 0x00373737, 0x00f2f2f2, 0x00efefef, 0x00a9a9a9, 0x00b9b9b9, 0x00f4f4f4, 0x00aaaaaa, 0x00000000, 0x00e7e7e7, 0x00e8e8e8, 0x00c9c9c9, 0x00f1f1f1, 0x00cccccc, 
	0x00000000, 0x00000000, 0x000d0b0b, 0x00f5c911, 0x00d9ae0b, 0x0015321a, 0x00365e50, 0x00f8d14b, 0x00ecc216, 0x00b5975b, 0x00d0ad16, 0x00bb9700, 0x00535040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x009f9f9f, 0x00f0f0f0, 0x00b4b4b4, 0x00000000, 0x00c7c7c7, 0x00e8e8e8, 0x00e6e6e6, 0x00f1f1f1, 0x00a7a7a7, 0x000f0f0f, 0x00f4f4f4, 0x00bbbbbb, 0x00000000, 0x00f5f5f5, 0x00e9e9e9, 0x00000000, 0x00adadad, 0x00f3f3f3, 0x00b8b8b8, 0x00bababa, 0x00f3f3f3, 0x00b5b5b5, 0x00000000, 0x00e0e0e0, 0x00f3f3f3, 0x000f0f0f, 0x00000000, 0x00000000, 0x00000000, 0x00c4c4c4, 0x00d9d9d9, 0x004d4d4d, 0x00f3f3f3, 0x000e0e0e, 0x002e2e2e, 0x00e7e7e7, 0x00b5b5b5, 0x00f3f3f3, 0x00c1c1c1, 0x00d4d4d4, 0x00bdbdbd, 0x00000000, 0x00e6e6e6, 0x00f2f2f2, 0x00cecece, 0x00949494, 0x000f0f0f, 
	0x00000000, 0x00000000, 0x00968851, 0x00fcc600, 0x00a3770e, 0x00306030, 0x001cbb64, 0x00799c4d, 0x00fcbe06, 0x00927036, 0x00cca731, 0x00c9a300, 0x00938549, 0x00000000, 0x00000000, 0x00222223, 0x006f6f6f, 0x00000000, 0x009a9a9a, 0x00f1f1f1, 0x00303030, 0x00bebebe, 0x00bbbbbb, 0x00838383, 0x00f0f0f0, 0x00a7a7a7, 0x000f0f0f, 0x00f3f3f3, 0x00b4b4b4, 0x00000000, 0x00f5f5f5, 0x00f2f2f2, 0x00000000, 0x008d8d8d, 0x00f1f1f1, 0x00949494, 0x008c8c8c, 0x00f1f1f1, 0x009b9b9b, 0x00000000, 0x00e9e9e9, 0x00f3f3f3, 0x00000000, 0x009b9b9b, 0x00dbdbdb, 0x00050505, 0x00c6c6c6, 0x00f2f2f2, 0x00d9d9d9, 0x00f2f2f2, 0x00424242, 0x00282828, 0x00e7e7e7, 0x007d7d7d, 0x00f2f2f2, 0x00ababab, 0x00a9a9a9, 0x00cacaca, 0x00000000, 0x00f3f3f3, 0x00dadada, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00141211, 0x00e4bb0d, 0x00efc401, 0x00b5a766, 0x00dbc5ba, 0x00e1ebc9, 0x00798d7e, 0x00bc9501, 0x00a78e57, 0x00bb9c4c, 0x00e4bb00, 0x00a59341, 0x00000000, 0x00000000, 0x00484949, 0x00f0f0f0, 0x007c7c7c, 0x00656565, 0x00f1f1f1, 0x00484848, 0x00bbbbbb, 0x00c6c6c6, 0x00141414, 0x00f2f2f2, 0x00bbbbbb, 0x00010101, 0x00f2f2f2, 0x00d0d0d0, 0x00222222, 0x00f3f3f3, 0x00e8e8e8, 0x00000000, 0x007b7b7b, 0x00f1f1f1, 0x006a6a6a, 0x005e5e5e, 0x00f1f1f1, 0x00888888, 0x00000000, 0x00dadada, 0x00f2f2f2, 0x00232323, 0x00dfdfdf, 0x00f2f2f2, 0x00202020, 0x00e7e7e7, 0x00cfcfcf, 0x00969696, 0x00f3f3f3, 0x007d7d7d, 0x00333333, 0x00f4f4f4, 0x00515151, 0x00f3f3f3, 0x00868686, 0x00939393, 0x00d8d8d8, 0x00000000, 0x00f3f3f3, 0x00e1e1e1, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00a19150, 0x00e8b700, 0x00dab822, 0x00b1ab9d, 0x00aaa6a3, 0x00c0aaa0, 0x0098919d, 0x007c7325, 0x00a5823b, 0x00ac8855, 0x00f2c801, 0x00c7ab2b, 0x00020201, 0x00000000, 0x00000000, 0x00bebebe, 0x00f1f1f1, 0x00f1f1f1, 0x00d2d2d2, 0x00020202, 0x00e6e6e6, 0x00f5f5f5, 0x00000000, 0x00e3e3e3, 0x00f5f5f5, 0x00000000, 0x00989898, 0x00f2f2f2, 0x00f3f3f3, 0x00f1f1f1, 0x006d6d6d, 0x00000000, 0x006e6e6e, 0x00f1f1f1, 0x00505050, 0x003a3a3a, 0x00f2f2f2, 0x007a7a7a, 0x00000000, 0x005f5f5f, 0x00f2f2f2, 0x00f2f2f2, 0x00f1f1f1, 0x00767676, 0x002c2c2c, 0x00f1f1f1, 0x00787878, 0x00000000, 0x00f4f4f4, 0x00cecece, 0x005b5b5b, 0x00f3f3f3, 0x00202020, 0x00f4f4f4, 0x006b6b6b, 0x00929292, 0x00ececec, 0x00000000, 0x00f3f3f3, 0x00f3f3f3, 0x00000000, 0x00000000, 0x00000000, 
	0x00494639, 0x00e3b901, 0x00f8c800, 0x00bea83e, 0x007b7791, 0x007b6b73, 0x00443a4a, 0x00434453, 0x0083897d, 0x00ae915c, 0x0091653d, 0x00eec616, 0x00dfb802, 0x003b3930, 0x00000000, 0x00000000, 0x00000000, 0x00616160, 0x00686868, 0x00010101, 0x00000000, 0x00474747, 0x00474747, 0x00000000, 0x00222222, 0x004b4b4b, 0x00000000, 0x00000000, 0x00505050, 0x00737373, 0x003b3b3b, 0x00000000, 0x00000000, 0x00121212, 0x00484848, 0x00080808, 0x00020202, 0x00484848, 0x00151515, 0x00000000, 0x00000000, 0x00373737, 0x00727272, 0x00515151, 0x00000000, 0x000e0e0e, 0x00484848, 0x00151515, 0x00000000, 0x00414141, 0x00434343, 0x001c1c1c, 0x00494949, 0x00000000, 0x003f3f3f, 0x000e0e0e, 0x00222222, 0x00424242, 0x00000000, 0x00484848, 0x00414141, 0x00000000, 0x00000000, 0x00000000, 
	0x00b29b3f, 0x00e0ae00, 0x00f2c60b, 0x00d2c487, 0x008386a1, 0x00737674, 0x00485b4d, 0x003b3b3f, 0x00a8aaaa, 0x00d1c2ac, 0x00784b41, 0x00d4a911, 0x00efbe00, 0x005e573f, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x001d1c18, 0x00bb9f30, 0x00f7cb0f, 0x00bdb4a4, 0x00000001, 0x00267b42, 0x0038c35e, 0x00023618, 0x0040383f, 0x00d8ccbb, 0x00673420, 0x00ac8322, 0x006c6541, 0x00070604, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00b9a96d, 0x00bbb6ad, 0x00918c84, 0x007ab182, 0x0053b36a, 0x008fa58c, 0x009d968d, 0x00bbb1a0, 0x00735c42, 0x003f3d3e, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 272)
const int bmp_snowcampallArray_LEN = 1;
const unsigned long* bmp_snowcampallArray[1] = {
	bmp_snowcampsnowcamp_64x32
};

// This defines the 'on' time of the display is us. The larger this number,
// the brighter the display. If too large the ESP will crash
uint8_t display_draw_time=60; //30-70 is usually fine

// PxMATRIX display(32,16,P_LAT, P_OE,P_A,P_B,P_C);
PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D);
//PxMATRIX display(64,64,P_LAT, P_OE,P_A,P_B,P_C,P_D,P_E);

// Some standard colors
uint16_t myRED = display.color565(255, 0, 0);
uint16_t myGREEN = display.color565(0, 255, 0);
uint16_t myBLUE = display.color565(0, 0, 255);
uint16_t myWHITE = display.color565(255, 255, 255);
uint16_t myYELLOW = display.color565(255, 255, 0);
uint16_t myCYAN = display.color565(0, 255, 255);
uint16_t myMAGENTA = display.color565(255, 0, 255);
uint16_t myBLACK = display.color565(0, 0, 0);

uint16_t myCOLORS[8]={myRED,myGREEN,myBLUE,myWHITE,myYELLOW,myCYAN,myMAGENTA,myBLACK};

#ifdef ESP8266
// ISR for display refresh
void display_updater()
{
  display.display(display_draw_time);
}
#endif

#ifdef ESP32
void IRAM_ATTR display_updater(){
  // Increment the counter and set the time of ISR
  portENTER_CRITICAL_ISR(&timerMux);
  display.display(display_draw_time);
  portEXIT_CRITICAL_ISR(&timerMux);
}
#endif


void display_update_enable(bool is_enable)
{

#ifdef ESP8266
  if (is_enable)
    display_ticker.attach(0.004, display_updater);
  else
    display_ticker.detach();
#endif

#ifdef ESP32
  if (is_enable)
  {
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 4000, true);
    timerAlarmEnable(timer);
  }
  else
  {
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
#endif
}


OneButton button = OneButton(
  P_BUTTON,  // Input pin for the button
  true,       // Button is active high
  true        // Disable internal pull-up resistor
);

bool clicked = false;

static void handleClick() {
  clicked = !clicked;
  Serial.println("Clicked!");
}


void setup() {

 Serial.begin(9600);
  // Define your display layout here, e.g. 1/8 step, and optional SPI pins begin(row_pattern, CLK, MOSI, MISO, SS)
  display.begin(16);

  pinMode(P_BUTTON, INPUT);
  button.attachClick(handleClick);

  // Set the brightness of the panels (default is 255)
  //display.setBrightness(50);

  display.clearDisplay();
  display.setTextColor(myCYAN);
  display.setCursor(2,0);
  display.print("Pixel");
  display.setTextColor(myMAGENTA);
  display.setCursor(2,8);
  display.print("Time");
  display_update_enable(true);
  delay(3000);
}

void showText(String text, uint8_t colorR, uint8_t colorG, uint8_t colorB) {
  display.clearDisplay();
  // display.setTextSize(1);
  // display.setTextColor(display.color565(colorR,colorG,colorB));
  display.setTextColor(myCYAN);
  display.setCursor(2,2);
  display.println(text);
}

void loop() {
  button.tick();

  if (clicked) {
    showText("Snowcamp", 255, 64, 128);
  } else {
    showText("Hello", 255, 64, 128);
  }
}
