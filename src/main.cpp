// This is how many color levels the display shows - the more the slower the update
// #define PxMATRIX_COLOR_DEPTH 8

// Defines the buffer height / the maximum height of the matrix
#define PxMATRIX_MAX_HEIGHT 64

// Defines the buffer width / the maximum width of the matrix
#define PxMATRIX_MAX_WIDTH 32

// Defines how long we display things by default
//#define PxMATRIX_DEFAULT_SHOWTIME 30

// Defines the speed of the SPI bus (reducing this may help if you experience noisy images)
//#define PxMATRIX_SPI_FREQUENCY 20000000

// Creates a second buffer for backround drawing (doubles the required RAM)
#define PxMATRIX_double_buffer true

#include <Arduino.h>
#include <PxMatrix.h>
#include <OneButton.h>

// Pins for LED MATRIX
#ifdef ESP32

#define P_LAT 22
#define P_A 19
#define P_B 23
#define P_C 18
#define P_D 5
#define P_E 15
#define P_OE 2
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

#endif

#ifdef ESP8266

#include <Ticker.h>
Ticker display_ticker;
#define P_LAT 16
#define P_A 5
#define P_B 4
#define P_C 15
#define P_D 12
#define P_E 0
#define P_OE 2

#define P_BUTTON  D9

#endif

// Number of different timers enabled (1-3)
#define TIMER_COUNT   2

// 'snowcamp_64x32', 64x32px
uint16_t static bmp_snowcamp_64x32[] = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3186, 0xa555, 0x0841, 0x0020, 0x0000, 0x18c3, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8410, 0xf7ff, 0x8c51, 0x6a25, 0x730a, 0x7aa7, 
	0x6b0b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xbdf7, 0xf79e, 0xf79e, 0xf79e, 
	0xe73c, 0x0000, 0x0000, 0x630c, 0xf79e, 0xf7be, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xf7be, 0x0000, 0x0000, 0x0000, 0xf7be, 0xf79e, 
	0xf79e, 0xf79e, 0xf7be, 0x0841, 0x0000, 0x18c3, 0xf7be, 0xf79e, 0x4a69, 0x0000, 0xf79e, 0xf7be, 0x0000, 0x8c71, 0xf7be, 0xf7be, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0861, 0xe75d, 0xffff, 0xffff, 0x6aa8, 0x5182, 0x5162, 
	0x6ac9, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xd69a, 0xf79e, 0xf79e, 0xbdd7, 0xf7be, 
	0xf79e, 0xb596, 0x0000, 0x4208, 0xf79e, 0xf79e, 0x7bef, 0x0000, 0xc638, 0xf79e, 0xe71c, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xf7be, 
	0xa514, 0xef7d, 0xf79e, 0xf7be, 0x0000, 0x0000, 0xf79e, 0xf79e, 0x2124, 0x0000, 0xf79e, 0xf79e, 0x0000, 0x6b4d, 0xf79e, 0xe71c, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0xefff, 0xf7ff, 0xffff, 0xbdd9, 0x4942, 0x5982, 
	0x6aca, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xe71c, 0xf79e, 0xf79e, 0x0000, 0x738e, 
	0xf79e, 0xf7be, 0x0000, 0x10a2, 0xf7be, 0xf79e, 0xef5d, 0x0000, 0xb596, 0xf79e, 0xdefb, 0x0000, 0x73ae, 0xf79e, 0xf79e, 0xbdf7, 
	0x0000, 0x6b6d, 0xf7be, 0xf79e, 0x2965, 0x0000, 0xf7be, 0xf79e, 0x2124, 0x1082, 0xf79e, 0xf7be, 0x0841, 0x6b4d, 0xf79e, 0xb596, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x83a9, 0xe62b, 0xe6f5, 0xfff9, 0xde0f, 0x4943, 0x4920, 
	0x6aa8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xef7d, 0xf79e, 0xf7be, 0x0000, 0x18e3, 
	0x9cf3, 0x3186, 0x0000, 0x39c7, 0xf7be, 0xf7be, 0xf7be, 0x0000, 0x632c, 0xf79e, 0xdedb, 0x0000, 0x7bef, 0xf79e, 0xf7be, 0x9cd3, 
	0x0000, 0x6b4d, 0xf7be, 0xf79e, 0x8410, 0x0000, 0xd6ba, 0xf79e, 0x0861, 0x39c7, 0xf79e, 0xf7be, 0x2124, 0x6b6d, 0xf79e, 0x8410, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0xe5a0, 0xe540, 0xe560, 0xf684, 0xee23, 0x6a86, 0x59a5, 
	0x7ae8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xbdd7, 0xf79e, 0xf79e, 0xef7d, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x4208, 0xf7be, 0xf7be, 0xf79e, 0x630c, 0x2945, 0xf79e, 0xdedb, 0x0000, 0x73ae, 0xf79e, 0xf79e, 0xb596, 
	0x0000, 0x73ae, 0xf7be, 0xf79e, 0x7bef, 0x0000, 0xa534, 0xf79e, 0x18e3, 0x7bef, 0xf79e, 0xf79e, 0x39e7, 0x6b6d, 0xf79e, 0x528a, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7349, 0xe560, 0xe602, 0xe560, 0xef35, 0xfffd, 0x9ba3, 0x5144, 
	0x82e8, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xf79e, 0xef7d, 
	0x0000, 0x0000, 0x0000, 0x4208, 0xf7be, 0xf7be, 0xf79e, 0xf7be, 0xad75, 0xf79e, 0xdedb, 0x0000, 0x73ae, 0xf79e, 0xf79e, 0xb596, 
	0x0000, 0x73ae, 0xf7be, 0xf79e, 0x7bcf, 0x0000, 0x6b4d, 0xf79e, 0x6b6d, 0xd69a, 0xf7be, 0xf7be, 0x8410, 0x8410, 0xf79e, 0x18e3, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xe5e2, 0xe5a0, 0xe604, 0xe5e0, 0xe64b, 0xff6d, 0xc503, 0x4126, 
	0x61e4, 0x2944, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xe71c, 0xf79e, 0xf79e, 
	0xf7be, 0x0000, 0x0000, 0x4208, 0xf7be, 0xdedb, 0xce59, 0xf79e, 0xf79e, 0xf7be, 0xdedb, 0x0000, 0x73ae, 0xf79e, 0xf79e, 0xb596, 
	0x0000, 0x73ae, 0xf7be, 0xf79e, 0x7bef, 0x0000, 0x4208, 0xf79e, 0xd6ba, 0xf7be, 0x73ae, 0x8c51, 0xf79e, 0xce59, 0xf79e, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7349, 0xdd60, 0xe604, 0xe603, 0xe604, 0xe5a0, 0xfe60, 0xe5c4, 0x4967, 
	0x38c0, 0xa469, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xbdd7, 0xf79e, 
	0xf79e, 0xef5d, 0x0000, 0x31a6, 0xf79e, 0xce59, 0x0000, 0xd69a, 0xf79e, 0xf7be, 0xdedb, 0x0000, 0x73ae, 0xf79e, 0xf79e, 0xb596, 
	0x0000, 0x7bcf, 0xf79e, 0xf79e, 0x8410, 0x0000, 0x4208, 0xf7be, 0xf7be, 0xf79e, 0x0000, 0x2104, 0xf79e, 0xf7be, 0xf7be, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdda3, 0xe5a0, 0xf664, 0xfe63, 0xe5e3, 0xe5e3, 0xee43, 0xf663, 0x6a86, 
	0x38e7, 0xabe0, 0x9c69, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c51, 0xf7be, 0x632c, 0x0000, 0xf79e, 
	0xf79e, 0xf7be, 0x0000, 0x0841, 0xf79e, 0xf7be, 0x0000, 0xbdf7, 0xf79e, 0xf7be, 0xdedb, 0x0000, 0x7bcf, 0xf79e, 0xf7be, 0xad55, 
	0x0000, 0x738e, 0xf7be, 0xf79e, 0x8c51, 0x0000, 0x2965, 0xf7be, 0xf79e, 0xf79e, 0x0000, 0x0000, 0xf79e, 0xf79e, 0xf7be, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7349, 0xe560, 0xf664, 0xb4c4, 0xc524, 0xfec3, 0xe5c3, 0xe5c3, 0xfee3, 0xa406, 
	0x38c9, 0xac24, 0xd540, 0x6ae6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xce59, 0x0000, 0x2104, 
	0xf79e, 0xf7be, 0x0000, 0x0000, 0xf79e, 0xf7be, 0x1082, 0x39c7, 0xf79e, 0xf79e, 0xdedb, 0x0000, 0x8410, 0xf79e, 0xf79e, 0x9cf3, 
	0x0000, 0x632c, 0xf7be, 0xf79e, 0x738e, 0x0000, 0x1082, 0xf7be, 0xf79e, 0xf79e, 0x0000, 0x1082, 0xf7be, 0xf79e, 0xf7be, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xd584, 0xe5c0, 0xfee3, 0x62c6, 0x2166, 0xfee3, 0xfe83, 0xdda4, 0xfec2, 0xd565, 
	0x1806, 0x8b63, 0xdde0, 0xbce1, 0x4a46, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xbdd7, 0xf79e, 0xf7be, 0x0861, 0xc638, 
	0xf79e, 0xf7be, 0x0000, 0x0841, 0xf7be, 0xf7be, 0x31a6, 0x0000, 0xf7be, 0xf79e, 0xdedb, 0x0000, 0x18e3, 0xf79e, 0xf7be, 0xf7be, 
	0x0000, 0xb5b6, 0xf79e, 0xf79e, 0x0000, 0x0000, 0x0000, 0xe71c, 0xf79e, 0xf7be, 0x0000, 0x1082, 0xf7be, 0xf79e, 0xc638, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7349, 0xdd80, 0xee23, 0xfe83, 0x5265, 0x0007, 0x9c44, 0xff23, 0xee04, 0xf663, 0xe5c3, 
	0x6a0a, 0xac08, 0xdde3, 0xbca0, 0xbce4, 0x3164, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2104, 0xf7be, 0xf79e, 0xf79e, 0xf79e, 
	0xf79e, 0x8410, 0x0000, 0x738e, 0xf7be, 0xf7be, 0x738e, 0x0000, 0xc638, 0xf79e, 0xf7be, 0x0000, 0x0000, 0x738e, 0xf79e, 0xf7be, 
	0xf79e, 0xf79e, 0xf79e, 0xb5b6, 0x0000, 0x0000, 0x0000, 0xef7d, 0xf79e, 0xf7be, 0x0000, 0x10a2, 0xf7be, 0xf79e, 0xce79, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xcd45, 0xe5a0, 0xfea3, 0xcd64, 0x31c6, 0x4187, 0x3086, 0xbca0, 0xfe60, 0xee24, 0xede0, 
	0xb511, 0xcdb4, 0xdd60, 0xc565, 0xbc80, 0xb4c5, 0x1082, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x5acb, 0x9cf3, 0x8430, 
	0x3186, 0x0000, 0x0000, 0x10a2, 0x630c, 0x5aeb, 0x10a2, 0x0000, 0x0000, 0x6b4d, 0x4a69, 0x0000, 0x0000, 0x0000, 0x39e7, 0x73ae, 
	0xa514, 0x73ae, 0x4a69, 0x0000, 0x0000, 0x0000, 0x0000, 0x2965, 0x630c, 0x5acb, 0x0000, 0x0000, 0x5acb, 0x632c, 0x2945, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x6b29, 0xe580, 0xe5c2, 0xfee3, 0x9425, 0x30a7, 0x51c3, 0x2167, 0xbd53, 0xff46, 0xe5c1, 0xfe80, 
	0xa46a, 0x62ce, 0xfe61, 0xcd83, 0xc524, 0xb440, 0x9c6a, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xc525, 0xe5a0, 0xee24, 0xfe83, 0x5a46, 0x0985, 0x0440, 0x1589, 0xbf9f, 0xee2d, 0xf600, 0xfec3, 
	0xac44, 0x516a, 0xf646, 0xee41, 0xbd25, 0xc4e0, 0xc521, 0x0840, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x6b29, 0xe580, 0xe5c2, 0xfea4, 0xdd84, 0x38e5, 0x4cca, 0x0502, 0x04e0, 0x03e0, 0x49e4, 0xfe23, 0xff03, 
	0xbcc5, 0x3088, 0xd546, 0xfee2, 0xc544, 0xc521, 0xc4e0, 0x3185, 0x0000, 0x0000, 0x0000, 0x0000, 0x10a2, 0x528a, 0x8c51, 0x52aa, 
	0x18e3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2965, 0x2104, 0x2965, 0x0000, 0x0000, 0x0000, 0x0000, 0x3186, 0x18c3, 0x3186, 
	0x0000, 0x0000, 0x0000, 0x2104, 0x2124, 0x39c7, 0x0000, 0x0000, 0x2945, 0x2945, 0x10a2, 0x10a2, 0x18c3, 0x2104, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0020, 0xc506, 0xe580, 0xe605, 0xfec2, 0x7b20, 0x18e4, 0xfdf0, 0xddb0, 0x9713, 0x6e8f, 0x00a4, 0x9ba2, 0xff62, 
	0xcd64, 0x210a, 0xa42a, 0xfea2, 0xe5e3, 0xc504, 0xbca0, 0x6309, 0x0000, 0x0000, 0x0000, 0x5aeb, 0xf79e, 0xf79e, 0xf79e, 0xf7be, 
	0xf7be, 0x6b6d, 0x0000, 0x0000, 0x0000, 0x4208, 0xf79e, 0xf79e, 0xf79e, 0x630c, 0x0000, 0x0000, 0x0000, 0xf79e, 0xf79e, 0xf79e, 
	0x52aa, 0x0000, 0x2104, 0xf7be, 0xf79e, 0xf79e, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xf7be, 0xf7be, 0xf79e, 0xf79e, 0xf7be, 0x0000, 
	0x0000, 0x0000, 0x6b49, 0xe580, 0xe5c2, 0xee04, 0xfe62, 0x4a43, 0x7bae, 0xe676, 0xf6ba, 0xff1d, 0xff3c, 0x9cb2, 0x1901, 0xfea1, 
	0xdd82, 0x7bd3, 0x836d, 0xe5c1, 0xfec2, 0xcd64, 0xb480, 0x83c9, 0x0000, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xce59, 0x52aa, 0xdedb, 
	0xf79e, 0xf7be, 0x0000, 0x0000, 0x0000, 0x8430, 0xf79e, 0xf7be, 0xf79e, 0x4208, 0x0000, 0x0000, 0x0000, 0xf79e, 0xf7be, 0xf79e, 
	0x94b2, 0x0000, 0x6b6d, 0xf7be, 0xf79e, 0xf7be, 0x0000, 0x0000, 0xe71c, 0xf79e, 0xf79e, 0x8c71, 0x6b6d, 0xf7be, 0xf79e, 0x9cf3, 
	0x0000, 0x0861, 0xc545, 0xe580, 0xe625, 0xe5c0, 0xfea8, 0xffff, 0xfffe, 0xf7bd, 0xd634, 0xd613, 0xfffe, 0xff38, 0x31c8, 0xac61, 
	0xf640, 0x738f, 0x8b8f, 0xdd62, 0xfea2, 0xe5e5, 0xb480, 0xa489, 0x0000, 0x0000, 0x0020, 0xf79e, 0xf7be, 0x73ae, 0x0000, 0x94b2, 
	0xf7be, 0xf79e, 0x10a2, 0x0000, 0x0000, 0xef7d, 0xf79e, 0xf7be, 0xf79e, 0x8410, 0x0000, 0x0000, 0x0000, 0xf7be, 0xf7be, 0xf79e, 
	0xc638, 0x0000, 0x94b2, 0xf79e, 0xf7be, 0xf7be, 0x0000, 0x0000, 0xef5d, 0xf7be, 0xef7d, 0x0000, 0x0000, 0xbdd7, 0xf79e, 0xf7be, 
	0x0000, 0x7b8a, 0xe560, 0xe603, 0xe605, 0xf620, 0xbd29, 0x8cb5, 0xad73, 0xb595, 0x942d, 0x9c8d, 0xb594, 0x840d, 0x634e, 0x62c8, 
	0xf620, 0x93ab, 0x726d, 0xc4e5, 0xfea2, 0xee24, 0xcd20, 0xbd25, 0x0000, 0x0000, 0x4208, 0xf79e, 0xf7be, 0x9cd3, 0x0000, 0xd69a, 
	0xf7be, 0xf79e, 0x4a69, 0x0000, 0x0000, 0xf7be, 0xef5d, 0xd6ba, 0xf79e, 0xce59, 0x0000, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xf79e, 
	0xb5b6, 0x0000, 0xa514, 0xf7be, 0xf7be, 0xf7be, 0x0000, 0x0000, 0xef7d, 0xf7be, 0xef7d, 0x1082, 0x0000, 0xad55, 0xf79e, 0xef5d, 
	0x1081, 0xdd82, 0xe5a0, 0xe605, 0xee02, 0xfea3, 0x6b4a, 0x2087, 0x3842, 0x10e4, 0x426b, 0x3a2a, 0x2987, 0x424a, 0x52cc, 0x3a4e, 
	0xcd84, 0xa3c3, 0x620c, 0xac09, 0xf662, 0xf663, 0xe5c2, 0xbce0, 0x18e3, 0x0000, 0x4208, 0xf79e, 0xf7be, 0x94b2, 0x0000, 0x0841, 
	0x18e3, 0x2945, 0x0000, 0x0000, 0x0000, 0xf79e, 0xc638, 0x5aeb, 0xf7be, 0xf7be, 0x0020, 0x0000, 0x0000, 0xf79e, 0xe71c, 0xef5d, 
	0xce79, 0x0000, 0xad75, 0xf7be, 0xef7d, 0xf7be, 0x0000, 0x0000, 0xef7d, 0xf79e, 0xf7be, 0x0000, 0x0000, 0xe71c, 0xf79e, 0xe71c, 
	0x9c8a, 0xe560, 0xee24, 0xe604, 0xe5c0, 0xfee8, 0x6b8f, 0xa556, 0xff3c, 0x72aa, 0x4aca, 0x632c, 0x632c, 0x632c, 0x4208, 0x73f2, 
	0xffb6, 0xa3e1, 0x6a2b, 0x8b4a, 0xee24, 0xf662, 0xee24, 0xcd20, 0x4a47, 0x0000, 0x39e7, 0xf79e, 0xf7be, 0x94b2, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0xf79e, 0xa514, 0x0000, 0xf7be, 0xf79e, 0x2104, 0x0000, 0x0000, 0xf79e, 0xc618, 0x632c, 
	0xef7d, 0x0000, 0xef5d, 0xa514, 0xd69a, 0xf7be, 0x0000, 0x0000, 0xef5d, 0xf7be, 0xf7be, 0xf7be, 0xf79e, 0xf7be, 0xf79e, 0x39c7, 
	0xe560, 0xe602, 0xe604, 0xe604, 0xe5a0, 0xff50, 0x94d5, 0x424a, 0xd71b, 0xd639, 0x5a0a, 0x5a6b, 0x6aec, 0x632c, 0x39e8, 0x8430, 
	0xfffe, 0xac6a, 0x7227, 0x82eb, 0xd565, 0xf662, 0xee25, 0xdd60, 0x83c9, 0x0000, 0x39e7, 0xf79e, 0xf7be, 0x94b2, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xad75, 0xf79e, 0x9cd3, 0x0000, 0xdefb, 0xf79e, 0x4208, 0x0000, 0x0000, 0xf79e, 0xc638, 0x2945, 
	0xf7be, 0xdedb, 0xf79e, 0x10a2, 0xbdf7, 0xf7be, 0x0000, 0x0000, 0xef5d, 0xf7be, 0xf7be, 0xe73c, 0xdefb, 0xf7be, 0x94b2, 0x0000, 
	0xdd20, 0xe5e1, 0xe605, 0xe5e1, 0xe5a0, 0xffb9, 0xce5a, 0x39c7, 0x526a, 0x532b, 0x4ae9, 0x52aa, 0x42e9, 0x732d, 0x528b, 0xa512, 
	0xffff, 0xb4f1, 0x7205, 0x7aab, 0xb448, 0xfea3, 0xe5e0, 0xdd20, 0xacaa, 0x0000, 0x4208, 0xf79e, 0xf7be, 0x94b2, 0x0000, 0x5aeb, 
	0x8c51, 0x9cf3, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xbdd7, 0x0000, 0xb5b6, 0xf79e, 0x8410, 0x0000, 0x0000, 0xf79e, 0xdefb, 0x0000, 
	0xf7be, 0xf79e, 0xf7be, 0x0000, 0xbdd7, 0xf7be, 0x0020, 0x0000, 0xef7d, 0xf7be, 0xef7d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x6b49, 0xe5a0, 0xe5c0, 0xede0, 0xe5c2, 0xffff, 0x9d14, 0x0861, 0x4127, 0x22a6, 0x45ab, 0x55cd, 0x23c7, 0x51a9, 0x0821, 0x736c, 
	0xffff, 0xbd73, 0x7245, 0x7aab, 0x938a, 0xf620, 0xee21, 0x83aa, 0x20e2, 0x0000, 0x39c7, 0xf7be, 0xf7be, 0x9cd3, 0x0000, 0xdedb, 
	0xf7be, 0xf79e, 0x3186, 0x0000, 0xf7be, 0xf79e, 0xf7be, 0xf79e, 0xf7be, 0xf7be, 0xce79, 0x0000, 0x0000, 0xf79e, 0xef7d, 0x0020, 
	0xf7be, 0xf79e, 0xf7be, 0x0020, 0xc638, 0xf7be, 0x0861, 0x0000, 0xef5d, 0xf7be, 0xef7d, 0x18c3, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x5a40, 0xe5c1, 0xe580, 0xeead, 0xffff, 0x2125, 0x0000, 0x21e5, 0xb757, 0x55ee, 0x0547, 0x9714, 0x5c0c, 0x0000, 0x0000, 
	0xfffd, 0xcdf5, 0x7a86, 0x8b08, 0x7203, 0xb4e9, 0x3141, 0x0000, 0x0000, 0x0000, 0x0020, 0xf7be, 0xf7be, 0x738e, 0x0000, 0x9492, 
	0xf79e, 0xf79e, 0x0000, 0x0000, 0xf79e, 0xf7be, 0xce59, 0x2965, 0xb5b6, 0xf79e, 0xf7be, 0x0000, 0x0000, 0xf7be, 0xef7d, 0x0000, 
	0xc638, 0xf79e, 0xdedb, 0x0000, 0xce79, 0xf7be, 0x0000, 0x0000, 0xef5d, 0xf7be, 0xf7be, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x6b29, 0xe520, 0xde51, 0xf7be, 0xad73, 0x1020, 0x438a, 0xafb8, 0x03c0, 0x0320, 0x8f35, 0x7d91, 0x0000, 0x840e, 
	0xfffd, 0xc5d5, 0x61a3, 0x8ae0, 0x6206, 0x41e6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xef7d, 0xb596, 0xef7d, 
	0xf79e, 0xf7be, 0x0000, 0x4228, 0xf79e, 0xf7be, 0x528a, 0x0000, 0x8410, 0xf79e, 0xf79e, 0x0000, 0x0000, 0xf79e, 0xf7be, 0x0000, 
	0x8430, 0xf79e, 0xb5b6, 0x0000, 0xd6ba, 0xf7be, 0x0000, 0x0000, 0xe73c, 0xf7be, 0xf79e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x8bea, 0xded7, 0xce58, 0xe719, 0xe73b, 0xd677, 0xc657, 0x54ec, 0x3cca, 0xbe16, 0xd657, 0xe6fa, 0xe73a, 
	0xd698, 0xc616, 0x7b08, 0x5aa9, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1082, 0xf7be, 0xf79e, 0xf79e, 0xf79e, 
	0xf7be, 0x0000, 0x0000, 0xf7be, 0xf79e, 0xf7be, 0x4a49, 0x0000, 0xa514, 0xf7be, 0xf79e, 0x39e7, 0x0000, 0xf79e, 0xf7be, 0x0000, 
	0x5acb, 0xf79e, 0x9cf3, 0x0000, 0xf79e, 0xf7be, 0x0000, 0x0000, 0xf7be, 0xf7be, 0xf7be, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0861, 
	0x0841, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0841, 0x1082, 0x0000, 0x0000, 0x10a2, 0x0841, 0x0000, 0x0000, 0x1082, 0x0020, 
	0x0000, 0x0000, 0x0861, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

enum app_mode_t {
  MODE_LOGO = 0,
  MODE_TIMER_1,
  MODE_TIMER_2,
  MODE_TIMER_3
};

struct hmstime_t {
  uint8_t h;
  uint8_t m;
  uint8_t s;
};

struct timer_settings {
  uint8_t duration;   // in minutes
  uint8_t warn1;      // remaining time in minutes
  uint8_t warn2;      // remaining time in minutes
  uint8_t warn3;      // remaining time in minutes
};

Ticker time_ticker;


timer_settings timer1_init = { 45, 15, 10, 5 };
timer_settings timer2_init = { 20, 10, 5, 2 };
timer_settings timer3_init = { 45, 15, 10, 5 };

hmstime_t cur_time = { 0, 0, 0 };
uint8_t cur_mode = MODE_LOGO;

// This defines the 'on' time of the display is us. The larger this number,
// the brighter the display. If too large the ESP will crash
uint8_t display_draw_time=20; //10-70 is usually fine

PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D);

// Some standard colors
uint16_t myRED = display.color565(255, 0, 0);
uint16_t myGREEN = display.color565(0, 255, 0);
uint16_t myBLUE = display.color565(0, 0, 255);
uint16_t myWHITE = display.color565(255, 255, 255);
uint16_t myYELLOW = display.color565(255, 255, 0);
uint16_t myCYAN = display.color565(0, 255, 255);
uint16_t myMAGENTA = display.color565(255, 0, 255);
uint16_t myBLACK = display.color565(0, 0, 0);

uint16_t myCOLORS[8]={myRED,myGREEN,myBLUE,myWHITE,myYELLOW,myCYAN,myMAGENTA,myBLACK};

#ifdef ESP8266
// ISR for display refresh
void display_updater()
{
  display.display(display_draw_time);
}
#endif

#ifdef ESP32
void IRAM_ATTR display_updater(){
  // Increment the counter and set the time of ISR
  portENTER_CRITICAL_ISR(&timerMux);
  display.display(display_draw_time);
  portEXIT_CRITICAL_ISR(&timerMux);
}
#endif


void display_update_enable(bool is_enable)
{

#ifdef ESP8266
  if (is_enable)
    display_ticker.attach(0.004, display_updater);
  else
    display_ticker.detach();
#endif

#ifdef ESP32
  if (is_enable)
  {
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 4000, true);
    timerAlarmEnable(timer);
  }
  else
  {
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
#endif
}


OneButton button = OneButton(
  P_BUTTON,  // Input pin for the button
  true,       // Button is active high
  true        // Disable internal pull-up resistor
);

bool started = false;
bool shown = false;



static void updateTime() {
  if (cur_time.s == 0) {
    cur_time.s = 59;
    cur_time.m--;
    if (cur_time.m == 0) {
      cur_time.m = 59;
      cur_time.h--;
      if (cur_time.h == 0) {
        cur_time.h = 23;
        // TODO: end of timer
      }
    }
  }
  cur_time.s--;
}

static void handleLongPress() {
  Serial.println("Long press!");

  if (cur_mode == MODE_LOGO) {
    cur_mode = MODE_TIMER_1;
    cur_time.h = timer1_init.duration / 60;
    cur_time.m = timer1_init.duration % 60;
    cur_time.s = 0;
  } else if (cur_mode == MODE_TIMER_1) {
    cur_mode = MODE_TIMER_2;
    cur_time.h = timer2_init.duration / 60;
    cur_time.m = timer2_init.duration % 60;
    cur_time.s = 0;
  } else {
    cur_mode = MODE_LOGO;
  }

  Serial.printf("Current mode: %d", cur_mode);

  started = false;
  time_ticker.detach();
  shown = false;
}

static void handleClick() {
  started = !started;

  Serial.println("Clicked!");

  if (cur_mode != MODE_LOGO && started) {
    time_ticker.attach(1.0, updateTime);
  } else {
    time_ticker.detach();
  }
}

static void handleDoubleClick() {
  Serial.println("Clicked!");

  if (cur_mode == MODE_TIMER_1) {
    cur_time.h = timer1_init.duration / 60;
    cur_time.m = timer1_init.duration % 60;
    cur_time.s = 0;
  } else if (cur_mode == MODE_TIMER_2) {
    cur_time.h = timer2_init.duration / 60;
    cur_time.m = timer2_init.duration % 60;
    cur_time.s = 0;
  }
  started = false;
  time_ticker.detach();
}

void drawBitmap(uint8_t x, uint8_t y, const uint16_t* bitmap, uint8_t w, uint8_t h) {
 int pixel = 0;
 for (int yy = 0; yy < h; yy++)
 {
   for (int xx = 0; xx < w; xx++)
   {
     display.drawPixel(xx + x , yy + y, bitmap[pixel]);
     pixel++;
   }
 }
}

void showText(String text, uint8_t colorR, uint8_t colorG, uint8_t colorB) {
  // display.clearDisplay();
  display.fillScreen(myBLACK);
  // display.setTextSize(1);
  // display.setTextColor(display.color565(colorR,colorG,colorB));
  display.setTextColor(myCYAN);
  display.setCursor(2,2);
  display.println(text);
}

void showTimer() {
  display.fillScreen(myBLACK);
  display.setTextSize(2);

  // TODO: check color
  display.setTextColor(myGREEN);

  display.setCursor(3,8);
  display.printf("%02d:%02d", cur_time.m, cur_time.s);

  display.writeFastHLine(0, 0, 64, myGREEN);
  display.writeFastHLine(0, 1, 64, myGREEN);
  display.writeFastHLine(0, 31, 64, myGREEN);
  display.writeFastHLine(0, 30, 64, myGREEN);
  display.writeFastVLine(0, 0, 32, myGREEN);
  display.writeFastVLine(1, 0, 32, myGREEN);
  display.writeFastVLine(63, 0, 32, myGREEN);
  display.writeFastVLine(62, 0, 32, myGREEN);

  display.showBuffer();
  delay(20);
}

void showLogo() {
  if (!shown) {
    display.fillScreen(myBLACK);
    drawBitmap(0, 0, bmp_snowcamp_64x32, 64, 32);
    display.showBuffer();
  }
  shown = true;
}

void setup() {
  Serial.begin(9600);

  // -------------------------------------------------------------------------
  // Setup display
  // -------------------------------------------------------------------------

  // 64x32 = 1/16 scan mode
  display.begin(16);
  display.clearDisplay();
  display_update_enable(true);

  // -------------------------------------------------------------------------
  // Setup physical button
  // -------------------------------------------------------------------------

  pinMode(P_BUTTON, INPUT);
  button.attachClick(handleClick);
  button.setPressTicks(1000);
  button.attachLongPressStart(handleLongPress);

  // Set the brightness of the panels (default is 255)
  //display.setBrightness(50);

  // -------------------------------------------------------------------------
  // Show Snowcamp logo
  // -------------------------------------------------------------------------

  // display.setTextColor(myCYAN);
  // display.setCursor(2,0);
  // display.print("Pixel");
  // display.setTextColor(myMAGENTA);
  // display.setCursor(2,8);
  // display.print("Time");

  showLogo();
  delay(3000);
  handleLongPress();
}

void loop() {
  button.tick();

  if (cur_mode == MODE_LOGO) {
    showLogo();
  } else {
    showTimer();
  }
}
